import "primitives/core.futil";
// component add_one () -> () {
//   cells {
//     ref r = std_reg(32);
//     add = std_add(32);
//   }

//   wires {
//     group increment {
//       add.left = r.out;
//       add.right = 32'd1;
//       r.in = add.out;
//       r.write_en = 1'd1;
//       increment[done] = r.done;
//     }
//   }

//   control {
//     seq {
//       increment;
//     }
//   }
// }

// component drive (in: 32) -> (out: 32) {
//   cells {
//     ref incr = add_one();
//     ref r = std_reg(32);
//     a = std_reg(32);
//   }

//   wires {
//     group write_a {
//       a.in = 32'd5;
//       a.write_en= 1'd1;
//       write_a[done] = a.done;
//     }
//     group a_to_r {
//       r.in = a.out;
//       r.write_en = 1'd1;
//       a_to_r[done] = r.done;
//     }
//   }

//   control {
//     seq {
//       write_a;
//       invoke incr[r=a]()();
//       a_to_r;
//     }
//   }
// }

// component main () -> () {
//   cells {
//     d = drive();
//     incr = add_one();
//     r = std_reg(32);
//     @external mem = std_mem_d1(32, 1, 1);
//   }
//   wires {
//     group mem_to_r {
//       r.in = mem.read_data;
//       mem.addr0 = 1'd0;
//       r.write_en = 1'd1;
//       mem_to_r[done] = r.done;
//     }

//     group r_to_mem {
//       mem.write_data = r.out;
//       mem.write_en = 1'd1;
//       mem.addr0 = 1'd0;
//       r_to_mem[done] = mem.done;
//     }
//   }
//   control { 
//     mem_to_r;
//     invoke d[incr=incr, r=r]()();
//     r_to_mem;
//   }
// }

component drive () -> () {
  cells {
    ref r = std_reg(32);
  }
  wires {
    group write_r {
      r.in = 32'd5;
      r.write_en = 1'd1;
      write_r[done] = r.done;
    }
  }
  control {
    write_r;
  }
}

component main () -> () {
  cells {
    r = std_reg(32);
    drive = drive();
    @external mem = std_mem_d1(32,1,1);
  }
  wires {
    group r_to_mem {
      mem.write_data = r.out;
      mem.write_en = 1'd1;
      mem.addr0 = 1'd0;
      r_to_mem[done] = mem.done;
    }
  }
  control {
    seq {
      invoke drive[r=r]()();
      r_to_mem;
    }
  }
}