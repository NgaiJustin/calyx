import "primitives/core.futil";
import "primitives/binary_operators.futil";

component main(@go go: 1) -> (@done done: 1) {
  cells {
    @external(1) mem = std_mem_d2(32, 2, 2, 2, 2);  // what does the (1) mean?
    //  00 01
    //  10 11
    val_00 = std_reg(32); 
    val_01 = std_reg(32);
    val_10 = std_reg(32);
    val_11 = std_reg(32);

    add_00 = std_add(32);
    add_01 = std_add(32);
    add_10 = std_add(32);
    add_11 = std_add(32);

    mult_00_00 = std_mult_pipe(32);
    mult_00_01 = std_mult_pipe(32);
    mult_00_10 = std_mult_pipe(32);
    mult_01_10 = std_mult_pipe(32);
    mult_01_11 = std_mult_pipe(32);
    mult_10_11 = std_mult_pipe(32);
    mult_11_11 = std_mult_pipe(32);

  }
  wires {

    group write_00 {
      mem.addr0 = 2'b0;
      mem.addr1 = 2'b0; 
      mem.write_en = 1'b1;
      mem.write_data = val_00.out;
      write_00[done] = mem.done;
    }
    group write_01 {
      mem.addr0 = 2'b0;
      mem.addr1 = 2'b1; 
      mem.write_en = 1'b1;
      mem.write_data = val_01.out;
      write_01[done] = mem.done;
    }
    group write_10 {
      mem.addr0 = 2'b1;
      mem.addr1 = 2'b0; 
      mem.write_en = 1'b1;
      mem.write_data = val_10.out;
      write_10[done] = mem.done;
    }
    group write_11 {
      mem.addr0 = 2'b1;
      mem.addr1 = 2'b1; 
      mem.write_en = 1'b1;
      mem.write_data = val_11.out;
      write_11[done] = mem.done;
    }

    group read_00 {
      mem.addr0 = 2'b0;
      mem.addr1 = 2'b0;
      val_00.in = mem.read_data;
      val_00.write_en = 1'b1;
      read_00[done] = val_00.done;
    }
    group read_01 {
      mem.addr0 = 2'b0;
      mem.addr1 = 2'b1;
      val_01.in = mem.read_data;
      val_01.write_en = 1'b1;
      read_01[done] = val_01.done;
    }
    group read_10 {
      mem.addr0 = 2'b1;
      mem.addr1 = 2'b0;
      val_10.in = mem.read_data;
      val_10.write_en = 1'b1;
      read_10[done] = val_10.done;
    }
    group read_11 {
      mem.addr0 = 2'b1;
      mem.addr1 = 2'b1;
      val_11.in = mem.read_data;
      val_11.write_en = 1'b1;
      read_11[done] = val_11.done;
    }

    group mul_00_00 {        
        mult_00_00.left = val_00.out;
        mult_00_00.right = val_00.out;
        mult_00_00.go = !mult_00_00.done ? 1'd1;
        mul_00_00[done] = mult_00_00.done ? 1'd1;
    }
    group mul_00_01 {
        mult_00_01.left = val_00.out;
        mult_00_01.right = val_01.out;
        mult_00_01.go = !mult_00_01.done ? 1'd1;
        mul_00_01[done] = mult_00_01.done ? 1'd1;
    }
    group mul_00_10 {
        mult_00_10.left = val_00.out;
        mult_00_10.right = val_10.out;
        mult_00_10.go = !mult_00_10.done ? 1'd1;
        mul_00_10[done] = mult_00_10.done ? 1'd1;
    }
    group mul_01_10 {
        mult_01_10.left = val_01.out;
        mult_01_10.right = val_10.out;
        mult_01_10.go = !mult_01_10.done ? 1'd1;
        mul_01_10[done] = mult_01_10.done ? 1'd1;
    }
    group mul_01_11 {
        mult_01_11.left = val_01.out;
        mult_01_11.right = val_11.out;
        mult_01_11.go = !mult_01_11.done ? 1'd1;
        mul_01_11[done] = mult_01_11.done ? 1'd1;
    }
    group mul_10_11 {
        mult_10_11.left = val_10.out;
        mult_10_11.right = val_11.out;
        mult_10_11.go = !mult_10_11.done ? 1'd1;
        mul_10_11[done] = mult_10_11.done ? 1'd1;
    }
    group mul_11_11 {
        mult_11_11.left = val_11.out;
        mult_11_11.right = val_11.out;
        mult_11_11.go = !mult_11_11.done ? 1'd1;
        mul_11_11[done] = mult_11_11.done ? 1'd1;
    }

    group add {
        add_00.left = mult_00_00.out;
        add_00.right = mult_01_10.out;
        val_00.in = add_00.out;
        val_00.write_en = 1'b1;

        add_01.left = mult_00_01.out;
        add_01.right = mult_01_11.out;
        val_01.in = add_01.out;
        val_01.write_en = 1'b1;

        add_10.left = mult_00_10.out;
        add_10.right = mult_10_11.out;
        val_10.in = add_10.out;
        val_10.write_en = 1'b1;

        add_11.left = mult_01_10.out;
        add_11.right = mult_11_11.out;
        val_11.in = add_11.out;
        val_11.write_en = 1'b1;
        add[done] = val_00.done & val_01.done & val_10.done & val_11.done ? 1'd1;
    }
  }
  control {
    seq {
      read_00;
      read_01;
      read_10;
      read_11;
      par {
        mul_00_00;
        mul_00_01;
        mul_00_10;
        mul_01_10;
        mul_01_11;
        mul_10_11;
        mul_11_11;
      }
      add;
      write_00;
      write_01;
      write_10;
      write_11;
    }
  }
}
