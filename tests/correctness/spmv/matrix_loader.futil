import "primitives/core.futil";
import "primitives/spmv/matrix_loader.futil";
import "primitives/spmv/matrix_buffer.futil";
import "primitives/dual_port_memories.futil";

component main () -> () {
  cells {
    loader = matrix_loader();
    buffer = matrix_buffer();
    @external out = std_mem_d1(32, 4, 3);
    reg_1 = std_reg(32);
    reg_addr_1 = std_reg(32);
    reg_2 = std_reg(32);
    reg_addr_2 = std_reg(32);
  }

  wires {
    static<1> group write_reg {
      reg_1.in = loader.mat_val_1;
      reg_1.write_en = 1'd1;
      reg_addr_1.in = loader.col_idx_1;
      reg_addr_1.write_en = 1'd1;
      reg_2.in = loader.mat_val_2;
      reg_2.write_en = 1'd1;
      reg_addr_2.in = loader.col_idx_2;
      reg_addr_2.write_en = 1'd1;
    }

    static<1> group write_out_1 {
      out.write_data = reg_1.out;
      out.addr0 = 3'd0;
      out.write_en = 1'd1;
    }

    static<1> group write_out_2 {
      out.write_data = reg_2.out;
      out.addr0 = 3'd1;
      out.write_en = 1'd1;
    }

    static<1> group write_out_3 {
      out.write_data = reg_addr_1.out;
      out.addr0 = 3'd2;
      out.write_en = 1'd1;
    }

    static<1> group write_out_3 {
      out.write_data = reg_addr_2.out;
      out.addr0 = 3'd3;
      out.write_en = 1'd1;
    }
  }

  control {
    static seq {
      static invoke buffer(write_en=1'd1, write_data=132'd32,
      addr0_w=32'd0)();
      static repeat 2 {
        static invoke buffer()();
      }
      static invoke loader(read_data=buffer.read_data)(
        read_en=buffer.read_en, addr0_r=buffer.addr0_r);
      static repeat 2 {
        static invoke loader()(stall=1'd1);
      }
      static par {
      static invoke loader()(stall=1'd1);
      write_reg;
      }
      write_out_1;
      write_out_2;
      write_out_3;
      write_out_4;
    }
  }
}